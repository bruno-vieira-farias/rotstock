server.port=8080

logging.level.=DEBUG

spring.thymeleaf.cache=false
server.tomcat.access-log-enabled=true

spring.jpa.show-sql=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# O ideal seria cada desenvolvedor ter o seu pr\u00F3prio banco.
# Nesse caso, os dados de banco poderiam ser passados por VM Options.
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=
spring.datasource.driverClassName=org.postgresql.Driver

#
# As configura\u00E7\u00F5es abaixo far\u00E3o com que o pool de conex\u00F5es verifique, a cada 30 segundos (= 30.000 ms),
# a exist\u00EAncia de conex\u00F5es em 'idle' h\u00E1 mais de 5 minutos (= 18.000 ms). Caso as encontre, elas s\u00E3o destru\u00EDdas.
#
# spring.datasource.test-while-idle=true
# spring.datasource.time-between-eviction-runs-millis=30000
# spring.datasource.min-evictable-idle-time-millis=18000

#
# As configura\u00E7\u00F5es abaixo far\u00E3o com que o pool de conex\u00F5es verifique se a conex\u00F5o \u00E9 v\u00E1lida antes de entregar
# para a aplica\u00E7\u00E3o.
#
# - Obs.: Isso \u00E9 importante porque h\u00E1 ind\u00EDcios de que o heroku "mata" conex\u00F5es com o banco de dados de
#         tempos em tempos, fazendo com que elas fiquem inv\u00E1lidas, lan\u00E7ando o erro 'This connection has been closed'
#         na hora de utiliz\u00E1-las.

spring.datasource.validation-query=select 1
spring.datasource.test-on-borrow=true
